<form>
    <script>
        Selected_Items = [];
        function Intitialize() {

            //let filter_selections = compnav_form_container.dataset.filter_selections;
            //console.log(Object.keys(filter_selections));            
            
            let doc_class_selected = compnav_form_container.dataset.doc_class_selected;
            let class_types_selected = compnav_form_container.dataset.class_types_selected;
            FillBubble(class_types_selected, "compnav_class_type_", "compnav-class-type-selected");
            let game_pack_names = compnav_form_container.dataset.game_pack_names;
            FillBubble(game_pack_names, "compnav_game_pack_name_", "compnav-display-none");
            let game_pack_keys_selected = compnav_form_container.dataset.game_pack_keys_selected;
            FillBubble(game_pack_keys_selected, "compnav_game_pack_name_", "compnav-game-pack-name-selected");

            let filter_fields_json = compnav_form_container.dataset.filter_fields_json;
            let filter_fields_obj = null;
            if (filter_fields_json !== "") {
                filter_fields_obj = JSON.parse(filter_fields_json);
            }

            console.log("compnav | BuildFilterControls");
            // Save Field selections
            let filter_selections = [];
            {{#each filter_selections as |filter_selections id|}}
                filter_selections["{{id}}"] = "{{filter_selections}}";
            {{/each}}
            document.getElementById("filter_name").value = (filter_selections["name"] ? filter_selections["name"] : "");

            this.BuildFilterControls(filter_selections, filter_fields_obj);
        }

        // The parent_filter_container wasn't working out, but I still want to be able to group items in the same container
        // so just leaving it commented out for now until I can get back to it.
        function BuildFilterControls(filter_selections, filter_fields_obj, is_child, root = "") {
            for (let key in filter_fields_obj) {
                let value = filter_fields_obj[key];
                if (filter_fields_obj.hasOwnProperty(key)) {
                    let field_label = document.createElement("label");
                    if (is_child && typeof (value) !== "object") { field_label.classList.add("compnav-filter-child-label"); }

                    let field_span = document.createElement("span");
                    field_span.textContent = (!is_child ? "data." : "." ) + key;
                    field_label.appendChild(field_span);
                    let h3 = null;
                    if (!is_child || typeof (value) === "object") { 
                        h3 = document.createElement("h3");
                        h3.appendChild(field_label);
                    }

                    let filter_container = null;
                    //if(!parent_filter_container){
                    filter_container = document.createElement("div");
                    filter_container.classList.add("compnav-form-group");
                    filter_container.appendChild(h3 !== null ? h3 : field_label);
                    //}
                    //else{
                    //    //let br = document.createElement("br");
                    //    //parent_filter_container.appendChild(br);
                    //    parent_filter_container.appendChild(field_label);
                    //}
                    let data_root_key = "data." + root + key
                    if (typeof (value) !== "object") {
                        let field_container = document.createElement("div");
                        field_container.classList.add("compnav-form-fields");
                        let field_filter = document.createElement("input");
                        field_filter.setAttribute("placeholder", value);
                        field_filter.classList.add("compnav-field-filter");
                        switch (value) {
                            case 'string':
                                field_filter.setAttribute("type", "text")
                                if (filter_selections[data_root_key] !== undefined) {
                                    field_filter.value = filter_selections[data_root_key];
                                }
                                break;
                            case 'boolean':
                                field_filter.setAttribute("type", "checkbox");
                                if (filter_selections[data_root_key] !== undefined) {
                                    if(Boolean(filter_selections[data_root_key]))
                                    {
                                        field_filter.checked = true;
                                    }
                                }
                                break;
                            case 'number':
                                field_filter.setAttribute("type", "number")
                                if (filter_selections[data_root_key] !== undefined) {
                                    field_filter.value = filter_selections[data_root_key];
                                }
                                break;
                            default:
                                field_filter.setAttribute("type", "text");
                                field_filter.removeAttribute("placeholder");
                                field_filter.setAttribute("placeholder", "unknown");
                                field_filter.disabled = true;

                                break;
                        }

                        field_filter.setAttribute("name", data_root_key);
                        field_container.appendChild(field_filter)

                        //if (!parent_filter_container) {
                        filter_container.setAttribute("title", data_root_key);
                        filter_container.appendChild(field_container);
                        div_compnav_fields.appendChild(filter_container);
                        //} 
                        //else {
                        //    parent_filter_container.appendChild(field_container);
                        //    div_compnav_fields.appendChild(parent_filter_container);
                        //}
                    }
                    else {
                        if (Object.keys(value).length > 0) {                    
                            //if (!parent_filter_container) {
                            filter_container.setAttribute("title", data_root_key);
                            div_compnav_fields.appendChild(filter_container);
                            BuildFilterControls(filter_selections, filter_fields_obj[key], true, root + key + ".");
                            //} 
                            //else {
                            //    div_compnav_fields.appendChild(parent_filter_container);
                            //    BuildFilterControls(filter_fields_obj[key], parent_filter_container, root + key + ".");
                            //}
                        }
                    }
                }
            }
        }

        function FillBubble(dataset, element_prefix, fill_class) {
            if (dataset) {
                for (const data of dataset.split(',')) {
                    let element = document.getElementById(element_prefix + data);
                    if (dataset.includes(data)) {
                        element?.classList.add(fill_class);
                        element?.classList.remove("compnav-display-none");
                    } else {
                        element?.classList.remove(fill_class);
                        element?.classList.add("compnav-display-none");
                    }
                }
            }
        }
        
        function dragstart_handler(ev) {
            ev.dataTransfer.setData("text/plain", ev.target.title);        
            ev.dataTransfer.setData("text/plain", ev.target.id);
            ev.dataTransfer.dropEffect = "copy";
        }

        function dragover_handler(ev) {
            console.log("Dragging over drop zone");
            ev.preventDefault();
            ev.dataTransfer.dropEffect = "copy";
        }

        async function drop_handler(ev) {
            ev.preventDefault();
            const data = ev.dataTransfer.getData("text/plain");
            const drop_item_id = document.getElementById(data).id
            const drop_item_gpk = document.getElementById(data).title
            const drop_zone = document.getElementById(ev.target.id);
            
            
            console.log(drop_item_gpk);
            console.log(drop_item_id);
            console.log(drop_zone.id);

            let pack = game.packs.get(drop_item_gpk);
            let item = await pack.getDocument(drop_item_id);
            console.log(item);

            Selected_Items.push({
                _id: drop_item_id,
                gpk: drop_item_gpk,
                img: item.img,
                name: item.name
            });
            let hdn_Selected_Items = document.getElementById("hdn_Selected_Items");
            hdn_Selected_Items.value = Selected_Items;
            console.log(Selected_Items);

            // TODO: Farm out to function
            // TODO: Check to see if item already selected
            // TODO: Build html
            
            //let item_label = document.createElement("label");
            //let br = document.createElement("br");
            //item_label.textContent = item.name;
            //drop_zone.appendChild(item_label);
            //drop_zone.appendChild(br);

            let div_item_selected_container = document.createElement("div");
            div_item_selected_container.classList.add("compnav-flex-row");
            div_item_selected_container.classList.add("compnav-filtered-result");
            div_item_selected_container.id = "selected_item_" + drop_item_id;
            div_item_selected_container.title = drop_item_gpk;
            //div_item_selected_container.setAttribute("data-game_pack_key", drop_item_gpk);
            div_item_selected_container.setAttribute("data-document_id", drop_item_id);

            let div_item_selected_img = document.createElement("div");
            div_item_selected_img.classList.add("compnav-filtered-result-img");
            let item_selected_img = document.createElement("img");
            item_selected_img.src = item.img;
            item_selected_img.height = 48;
            item_selected_img.width = 48;
            div_item_selected_img.appendChild(item_selected_img);

            let div_item_selected_name = document.createElement("div");
            div_item_selected_name.classList.add("compnav-filtered-result-name");
            let h4 = document.createElement("h4");
            let a = document.createElement("a");
            a.innerText = item.name;
            h4.appendChild(a);
            div_item_selected_name.appendChild(h4);

            div_item_selected_name.addEventListener("click", (event) => {
                let item_id = drop_item_id;
                let pack = game.packs.find(p => p.collection === drop_item_gpk);
                this.ShowItem(pack, item_id);
            });

            div_item_selected_container.appendChild(div_item_selected_img);
            div_item_selected_container.appendChild(div_item_selected_name);

            if(item.source !== undefined){
                let div_item_selected_source = document.createElement("div");
                div_item_selected_source.classList.add("compnav-filtered-result-source");
                let span = document.createElement("span");
                span.innerText = item.source
                div_item_selected_source.appendChild(span);
                div_item_selected_container.appendChild(div_item_selected_source);
            }

            drop_zone.appendChild(div_item_selected_container);


            //<div id="{{filter_results._id}}" class="compnav-flex-row compnav-filtered-result" title="{{filter_results.gpk}}" 
            //data-game_pack_key="{{filter_results.gpk}}" data-document_id="{{filter_results._id}}"
            //draggable="true" ondragstart="dragstart_handler(event)">
            //    <div class="compnav-filtered-result-img">
            //        <img src="{{filter_results.img}}" width="48" height="48" />
            //    </div>
            //    <div class="compnav-filtered-result-name">
            //        <h4><a>{{filter_results.name}}</a></h4>
            //    </div>
            //    <div class="compnav-filtered-result-source">
            //        <span>{{filter_results.source}}</span>
            //    </div>
            //</div>

        }
        
        async function ShowItem(pack, item_id) {
            let doc = await pack.getDocument(item_id);
            doc.sheet.render(true);
        }

    </script>

    {{!-- begin markup --}}

    <div id="compnav_form_container" class="compnav-form-container" data-class_types_selected="{{class_types_selected}}"
        data-game_pack_keys_selected="{{game_pack_keys_selected}}" data-filter_fields_json="{{filter_fields_json}}" 
        data-game_pack_names="{{game_pack_names}}" data-doc_class_selected="{{doc_class_selected}}" data-filter_selections="{{filter_selections}}" >

        <div class="compnav-form-column">
            <h3>Filter</h3>

            <div>
                {{localize "CompNav.form-app.filter.doc-class.name"}}:
            </div>
            <div class="compnav-form-filter">
                <p class="compnav-filter-bubble-container">
                    {{#each doc_classes as |doc_classes id|}}
                    <span id="compnav_doc_class_{{doc_classes}}" class="compnav-doc-class">{{doc_classes}}</span>
                    {{/each}}
                </p>
            </div>

            <div>
                {{localize "CompNav.form-app.filter.class-type.name"}}:
            </div>
            <div id="div_compnav_class_types" class="compnav-form-filter">
                <p class="compnav-filter-bubble-container">
                    {{#unless class_types}}
                    n/a
                    {{/unless}}
                    {{#each class_types as |class_types id|}}
                    <span id="compnav_class_type_{{class_types}}" class="compnav-class-type">{{class_types}}</span>
                    {{/each}}
                </p>
            </div>

            <div>
                {{localize "CompNav.form-app.filter.game-pack.name"}}:
            </div>
            <div id="div_compnav_game_packs" class="compnav-form-filter">
                <p class="compnav-filter-bubble-container">
                    {{#each game_pack_names as |game_pack_names id|}}
                    <span id="compnav_game_pack_name_{{id}}" title={{id}} class="compnav-game-pack-name compnav-display-none">{{game_pack_names}}</span>
                    {{/each}}
                </p>
                {{!-- <p class="notes">
                    {{#each game_pack_keys_selected as |game_pack_keys_selected id|}}
                    {{game_pack_keys_selected}}</br>
                    {{/each}}
                </p> --}}
            </div>

            <div id="div_compnav_fields" class="compnav-filter-container">
                <div>
                    <button type="submit" id="submit">
                        <i class="fa fa-filter"></i>Filter
                    </button>
                <div class="compnav-filtered-result-source">
                    {{#each filter_selections as |filter_selections id|}}
                    <span>{{ id}}: {{filter_selections}}&nbsp;+</span>
                    {{/each}}
                </div>
                    <p>
                        <h3>Fields:</h3>
                    </p>
                </div>

                <div class="compnav-form-group">
                    <label><h3><span>Name</span></h3></label>
                    <div class="compnav-form-fields">
                        <input id="filter_name" class="compnav-filter-name" type="text" placeholder="string" name="name">
                    </div>
                </div>
            </div>

            {{!-- <textarea style="width: 100%;
                overflow-wrap: break-word;
                font-size: smaller;
                margin: 0px;
                height: 840px;
                border: none;">{{filter_fields_json}}</textarea> --}}

        </div>
        
        <div class="compnav-form-column compnav-form-col-border">
            <h3>Results</h3>
            {{#each filter_results as |filter_results id|}}
            <div id="{{filter_results._id}}" class="compnav-flex-row compnav-filtered-result" title="{{filter_results.gpk}}" 
            data-game_pack_key="{{filter_results.gpk}}" data-document_id="{{filter_results._id}}"
            draggable="true" ondragstart="dragstart_handler(event)">
                <div class="compnav-filtered-result-img">
                    <img src="{{filter_results.img}}" width="48" height="48" />
                </div>
                <div class="compnav-filtered-result-name">
                    <h4><a>{{filter_results.name}}</a></h4>
                </div>
                <div class="compnav-filtered-result-source">
                    <span>{{filter_results.source}}</span>
                </div>
            </div>
            {{/each}}
        </div>

        <div id="Selected_Item_Drop_Zone" class="compnav-form-column compnav-form-col-border" ondrop="drop_handler(event)" ondragover="dragover_handler(event)">
            <h3>Selected</h3>     
            <input id="hdn_Selected_Items" type="hidden" name="hdn_Selected_Items" value=""></hidden>              
            {{#each Selected_Items as |Selected_Items id|}}
            <div id="{{Selected_Items._id}}" class="compnav-flex-row compnav-filtered-result" title="{{Selected_Items.gpk}}" 
            data-game_pack_key="{{Selected_Items.gpk}}" data-document_id="{{Selected_Items._id}}"
            draggable="true" ondragstart="dragstart_handler(event)">
                <div class="compnav-filtered-result-img">
                    <img src="{{Selected_Items.img}}" width="48" height="48" />
                </div>
                <div class="compnav-filtered-result-name">
                    <h4><a>{{Selected_Items.name}}</a></h4>
                </div>
                <div class="compnav-filtered-result-source">
                    <span>{{Selected_Items.source}}</span>
                </div>
            </div>
            {{/each}}     
        </div>
    </div>

</form>